import torch
import torch.nn as nn
from cifar.modules import DynamicReLU
from cifar.modules import DynamicGroupLassoGatedReLU
from cifar.modules import TorchGraph


def conv3x3(in_planes, out_planes, stride=1, groups=1, dilation=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=dilation, groups=groups, bias=False, dilation=dilation)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None):
        super(BasicBlock, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        if groups != 1 or base_width != 64:
            raise ValueError('BasicBlock only supports groups=1 and base_width=64')
        if dilation > 1:
            raise NotImplementedError("Dilation > 1 not supported in BasicBlock")
        # Both self.conv1 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = norm_layer(planes)
        # self.relu = nn.ReLU(inplace=True)
        self.relu1 = DynamicReLU(inplanes, planes)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = norm_layer(planes)
        self.relu2 = DynamicReLU(planes, planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        # out = self.relu(out)
        a1, b1 = self.relu1(x)
        out = a1*out + b1
        out1, _ = torch.max(out, dim=0)

        out = self.conv2(out1)
        out = self.bn2(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        # out = self.relu(out)
        a2, b2 = self.relu2(out1)
        out = a2*out + b2
        out, _ = torch.max(out, dim=0)

        return out


class BasicGatedBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None, ratio=1.0, torch_graph=None):
        super(BasicGatedBlock, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        if groups != 1 or base_width != 64:
            raise ValueError('BasicBlock only supports groups=1 and base_width=64')
        if dilation > 1:
            raise NotImplementedError("Dilation > 1 not supported in BasicBlock")
        # Both self.conv1 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = norm_layer(planes)
        # self.relu = nn.ReLU(inplace=True)
        self.relu1 = DynamicGroupLassoGatedReLU(inplanes, planes, ratio, conv=self.conv1, bn=self.bn1)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = norm_layer(planes)
        self.relu2 = DynamicGroupLassoGatedReLU(planes, planes, ratio, conv=self.conv2, bn=self.bn2)
        self.downsample = downsample
        self.stride = stride
        self.torch_graph = torch_graph

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        # out = self.relu(out)
        out1, gate1 = self.relu1(x, out)

        out2 = self.conv2(out1)
        out2 = self.bn2(out2)

        if self.downsample is not None:
            identity = self.downsample(x)

        out2 += identity

        out2, gate2 = self.relu2(out1, out2)

        self.torch_graph.append_tensor('gate_values', gate1)
        self.torch_graph.append_tensor('gate_values', gate2)

        return out2

class Bottleneck(nn.Module):
    # Bottleneck in torchvision places the stride for downsampling at 3x3 convolution(self.conv2)
    # while original implementation places the stride at the first 1x1 convolution(self.conv1)
    # according to "Deep residual learning for image recognition"https://arxiv.org/abs/1512.03385.
    # This variant is also known as ResNet V1.5 and improves accuracy according to
    # https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch.

    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None):
        super(Bottleneck, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        width = int(planes * (base_width / 64.)) * groups
        # Both self.conv2 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv1x1(inplanes, width)
        self.bn1 = norm_layer(width)
        self.conv2 = conv3x3(width, width, stride, groups, dilation)
        self.bn2 = norm_layer(width)
        self.conv3 = conv1x1(width, planes * self.expansion)
        self.bn3 = norm_layer(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out

def cal_gate_l1_norm(torch_graph, batch_size):
    gate_values_list = torch_graph.get_tensor_list('gate_values')
    gate_l1_norm = 0.0
    for gate_value in gate_values_list:
        gate_l1_norm += torch.norm(gate_value, p=1)/batch_size

    torch_graph.clear_tensor_list('gate_values')

    return gate_l1_norm

class ResNet(nn.Module):

    def __init__(self, block, layers, num_classes=1000, zero_init_residual=False,
                 groups=1, width_per_group=64, replace_stride_with_dilation=None,
                 norm_layer=None, ratio=1.0):
        super(ResNet, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        self._norm_layer = norm_layer

        self.inplanes = 64
        self.dilation = 1
        self.ratio = ratio

        if replace_stride_with_dilation is None:
            # each element in the tuple indicates if we should replace
            # the 2x2 stride with a dilated convolution instead
            replace_stride_with_dilation = [False, False, False]
        if len(replace_stride_with_dilation) != 3:
            raise ValueError("replace_stride_with_dilation should be None "
                             "or a 3-element tuple, got {}".format(replace_stride_with_dilation))
        self.torch_graph = TorchGraph()
        self.torch_graph.add_tensor_list('gate_values')
        self.groups = groups
        self.base_width = width_per_group
        self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = norm_layer(self.inplanes)
        # self.relu = nn.ReLU(inplace=True)
        self.relu = DynamicGroupLassoGatedReLU(3, self.inplanes, ratio, conv=self.conv1, bn=self.bn1)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2,
                                       dilate=replace_stride_with_dilation[0])
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2,
                                       dilate=replace_stride_with_dilation[1])
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2,
                                       dilate=replace_stride_with_dilation[2])
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

        # Zero-initialize the last BN in each residual branch,
        # so that the residual branch starts with zeros, and each residual block behaves like an identity.
        # This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677
        if zero_init_residual:
            for m in self.modules():
                if isinstance(m, Bottleneck):
                    nn.init.constant_(m.bn3.weight, 0)
                elif isinstance(m, BasicBlock):
                    nn.init.constant_(m.bn2.weight, 0)

    def _make_layer(self, block, planes, blocks, stride=1, dilate=False):
        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                conv1x1(self.inplanes, planes * block.expansion, stride),
                norm_layer(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, self.groups,
                            self.base_width, previous_dilation, norm_layer, ratio=self.ratio, torch_graph=self.torch_graph))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups=self.groups,
                                base_width=self.base_width, dilation=self.dilation,
                                norm_layer=norm_layer, ratio=self.ratio, torch_graph=self.torch_graph))

        return nn.Sequential(*layers)

    def _forward_impl(self, input):
        # See note [TorchScript super()]
        batch_size = input.size(0)
        x = self.conv1(input)
        x = self.bn1(x)
        x, gate = self.relu(input, x)
        self.torch_graph.append_tensor('gate_values', gate)

        x = self.maxpool(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.fc(x)
        gate_l1_norm = cal_gate_l1_norm(self.torch_graph, batch_size)

        return x, gate_l1_norm

    def forward(self, x):
        return self._forward_impl(x)


def resnet18(num_classes, ratio):
    return ResNet(block=BasicGatedBlock, num_classes=num_classes, layers=[2,2,2,2], ratio=ratio)

def resnet34(num_classes):
    return ResNet(block=BasicBlock, num_classes=num_classes, layers=[3,4,6,3])

def resnet50(num_classes):
    return ResNet(block=Bottleneck, num_classes=num_classes, layers=[3,4,6,3])

def resnet101(num_classes):
    return ResNet(block=Bottleneck, num_classes=num_classes, layers=[3,4,23,3])

def DyReLUResNetImageNet(depth, num_classes, ratio):
    if depth == 18:
        return resnet18(num_classes=num_classes, ratio=ratio)
    elif depth == 34:
        return resnet34(num_classes=num_classes)
    elif depth == 50:
        return resnet50(num_classes=num_classes)
    elif depth == 101:
        return resnet101(num_classes=num_classes)
    else:
        raise NotImplementedError

if __name__ == '__main__':
    from thop.profile import profile
    x = torch.rand(1,3,224,224)
    model = DyReLUResNetImageNet(18, 10, 0.5)
    outputs, gate_l1_norm = model(x)
    print('out size:{0}, gate_l1_norm:{1}'.format(outputs.size(), gate_l1_norm))

