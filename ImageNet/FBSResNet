import torch
import torch.nn as nn
# from cifar.DynamicReLU import TorchGraph

class TorchGraph(nn.Module):
    def __init__(self):
        super(TorchGraph, self).__init__()
        self._graph = {}

    def add_tensor_list(self, name):
        self._graph[name] = []

    def append_tensor(self, name, val):
        self._graph[name].append(val)

    def clear_tensor_list(self, name):
        self._graph[name].clear()

    def get_tensor_list(self, name):
        return self._graph[name]

    def set_global_var(self, name, val):
        self._graph[name] = val

    def get_global_var(self, name):
        return self._graph[name]


def conv3x3(in_planes, out_planes, stride=1, groups=1, dilation=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=dilation, groups=groups, bias=False, dilation=dilation)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


class GatedBN(nn.Module):
    def __init__(self, inplanes, outplanes, ratio, torch_graph):
        super(GatedBN, self).__init__()
        self.inplanes = inplanes
        self.outplanes = outplanes
        self.ratio = ratio
        self.torch_graph = torch_graph
        self.bn = nn.BatchNorm2d(outplanes, affine=False)

        self.global_pool = nn.AdaptiveAvgPool2d((1,1))
        self.gate = nn.Linear(inplanes, outplanes)
        self.beta = nn.Parameter(torch.zeros(outplanes))
        self.relu = nn.Sigmoid()
        self.init_weight()

    def init_weight(self):
        nn.init.constant_(self.gate.bias, 1.0)
        # nn.init.kaiming_normal_(self.gate.weight)

    def forward(self, input1, input2):
        batch_size = input1.size(0)
        x = self.global_pool(input1)
        x = x.view(batch_size, -1)
        gates = self.relu(self.gate(x))
        # if self.training:
        self.torch_graph.append_tensor('gate_values', gates)
        beta = self.beta.repeat(batch_size, 1)

        if self.ratio < 1:
            inactive_channels = self.outplanes - round(self.outplanes * self.ratio)
            inactive_idx = (-gates).topk(inactive_channels, 1)[1]
            gates = gates.scatter(1, inactive_idx, 0)  # set inactive channels as zeros
            beta = beta.scatter(1, inactive_idx, 0)

        x = self.bn(input2)
        x = gates.unsqueeze(2).unsqueeze(3) * x
        x = x + beta.unsqueeze(2).unsqueeze(3)

        return x

class BasicGatedBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None, ratio=1.0, torch_graph=None):
        super(BasicGatedBlock, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        if groups != 1 or base_width != 64:
            raise ValueError('BasicBlock only supports groups=1 and base_width=64')
        if dilation > 1:
            raise NotImplementedError("Dilation > 1 not supported in BasicBlock")
        # Both self.conv1 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = GatedBN(inplanes, planes, ratio, torch_graph)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = GatedBN(planes, planes, ratio, torch_graph)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(x, out)
        out1 = self.relu(out)

        out = self.conv2(out1)
        out = self.bn2(out1, out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out


class Bottleneck(nn.Module):
    # Bottleneck in torchvision places the stride for downsampling at 3x3 convolution(self.conv2)
    # while original implementation places the stride at the first 1x1 convolution(self.conv1)
    # according to "Deep residual learning for image recognition"https://arxiv.org/abs/1512.03385.
    # This variant is also known as ResNet V1.5 and improves accuracy according to
    # https://ngc.nvidia.com/catalog/model-scripts/nvidia:resnet_50_v1_5_for_pytorch.

    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None):
        super(Bottleneck, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        width = int(planes * (base_width / 64.)) * groups
        # Both self.conv2 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv1x1(inplanes, width)
        self.bn1 = norm_layer(width)
        self.conv2 = conv3x3(width, width, stride, groups, dilation)
        self.bn2 = norm_layer(width)
        self.conv3 = conv1x1(width, planes * self.expansion)
        self.bn3 = norm_layer(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out

class DownSample(nn.Module):
    def __init__(self, inplnes, outplanes, stride, ratio, torch_graph):
        super(DownSample, self).__init__()
        self.conv = conv1x1(inplnes, outplanes, stride)
        self.bn = GatedBN(inplnes, outplanes, ratio, torch_graph)

    def forward(self, input):
        x = self.conv(input)
        x = self.bn(input, x)

        return x

def cal_gate_l1_norm(torch_graph, batch_size):
    gate_values_list = torch_graph.get_tensor_list('gate_values')
    gate_l1_norm = 0.0
    for gate_value in gate_values_list:
        gate_l1_norm += torch.norm(gate_value, p=1)/batch_size

    torch_graph.clear_tensor_list('gate_values')

    return gate_l1_norm

class ResNet(nn.Module):

    def __init__(self, block, layers, num_classes=1000, zero_init_residual=False,
                 groups=1, width_per_group=64, replace_stride_with_dilation=None,
                 norm_layer=None, ratio=1.0):
        super(ResNet, self).__init__()
        self.ratio = ratio
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        self._norm_layer = norm_layer

        self.inplanes = 64
        self.dilation = 1
        if replace_stride_with_dilation is None:
            # each element in the tuple indicates if we should replace
            # the 2x2 stride with a dilated convolution instead
            replace_stride_with_dilation = [False, False, False]
        if len(replace_stride_with_dilation) != 3:
            raise ValueError("replace_stride_with_dilation should be None "
                             "or a 3-element tuple, got {}".format(replace_stride_with_dilation))
        self._TorchGraph = TorchGraph()
        self._TorchGraph.add_tensor_list('gate_values')

        self.groups = groups
        self.base_width = width_per_group
        self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False)
        self.bn1 = GatedBN(3, self.inplanes, ratio, self._TorchGraph)
        # self.bn1 = nn.BatchNorm2d(self.inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2,
                                       dilate=replace_stride_with_dilation[0])
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2,
                                       dilate=replace_stride_with_dilation[1])
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2,
                                       dilate=replace_stride_with_dilation[2])
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
        # Zero-initialize the last BN in each residual branch,
        # so that the residual branch starts with zeros, and each residual block behaves like an identity.
        # This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677


    def _make_layer(self, block, planes, blocks, stride=1, dilate=False):
        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if stride != 1 or self.inplanes != planes * block.expansion:
            # downsample = nn.Sequential(
            #     conv1x1(self.inplanes, planes * block.expansion, stride),
            #     norm_layer(planes * block.expansion),
            # )
            downsample = DownSample(self.inplanes, planes*block.expansion, stride, self.ratio, self._TorchGraph)

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, self.groups,
                            self.base_width, previous_dilation, norm_layer, self.ratio, self._TorchGraph))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups=self.groups,
                                base_width=self.base_width, dilation=self.dilation,
                                norm_layer=norm_layer, ratio=self.ratio, torch_graph=self._TorchGraph))

        return nn.Sequential(*layers)

    def _forward_impl(self, input):
        # See note [TorchScript super()]
        batch_size = input.size(0)
        x = self.conv1(input)
        x = self.bn1(input, x)
        x = self.relu(x)

        x = self.maxpool(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)

        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.fc(x)

        gate_l1_norm = cal_gate_l1_norm(self._TorchGraph, batch_size)

        return x, gate_l1_norm

    def forward(self, x):
        return self._forward_impl(x)


def resnet18(num_classes, ratio):
    return ResNet(block=BasicGatedBlock, num_classes=num_classes, layers=[2,2,2,2], ratio=ratio)

def resnet34(num_classes, ratio):
    return ResNet(block=BasicGatedBlock, num_classes=num_classes, layers=[3,4,6,3], ratio=ratio)

def resnet50(num_classes):
    return ResNet(block=Bottleneck, num_classes=num_classes, layers=[3,4,6,3])

def resnet101(num_classes):
    return ResNet(block=Bottleneck, num_classes=num_classes, layers=[3,4,23,3])

def FBSResNetImageNet(depth, num_classes, ratio):
    if depth == 18:
        return resnet18(num_classes=num_classes, ratio=ratio)
    elif depth == 34:
        return resnet34(num_classes=num_classes, ratio=ratio)
    elif depth == 50:
        return resnet50(num_classes=num_classes, ratio=ratio)
    elif depth == 101:
        return resnet101(num_classes=num_classes, ratio=ratio)
    else:
        raise NotImplementedError

if __name__ == '__main__':
    x = torch.rand(2,3,224,224)
    target = torch.LongTensor(2).random_(5)
    model = FBSResNetImageNet(18, 1000, 1.0)
    out, gate_l1_norm = model(x)

    print(out.size(), gate_l1_norm)
