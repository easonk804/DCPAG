import argparse
import os
import shutil
import time
import numpy as np
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.backends.cudnn as cudnn
import torch.distributed as dist
from torch.nn.parallel import DistributedDataParallel as DDP
import random
import torch.optim
import torch.utils.data
import logging
import sys
sys.path.append('../')
from tensorboard_logger import configure, log_value

from torch.optim.lr_scheduler import CosineAnnealingLR
from imagenet.megrec_imagenet import *
from imagenet.FBSResNet import FBSResNetImageNet

import torchvision.datasets as datasets

logging.getLogger().setLevel(logging.INFO)

parser = argparse.ArgumentParser(description='PyTorch DynamicChannelExecution Training')
parser.add_argument('--epochs', default=300, type=int,
                    help='number of total epochs to run')
parser.add_argument('--start-epoch', default=0, type=int,
                    help='manual epoch number (useful on restarts)')
parser.add_argument('-b', '--batch-size', default=64, type=int,
                    help='mini-batch size (default: 64)')
parser.add_argument('--lr', '--learning-rate', default=0.1, type=float,
                    help='initial learning rate')
parser.add_argument('--momentum', default=0.9, type=float, help='momentum')
parser.add_argument('--weight-decay', '--wd', default=1e-4, type=float,
                    help='weight decay (default: 1e-4)')
parser.add_argument('--print-freq', '-p', default=10, type=int,
                    help='print frequency (default: 10)')
parser.add_argument('--no-augment', dest='augment', action='store_false',
                    help='whether to use standard augmentation (default: True)')
parser.add_argument('--resume', default='', type=str,
                    help='path to latest checkpoint (default: none)')
parser.add_argument('--name', default='DenseNet_BC_100_12', type=str,
                    help='name of experiment')
parser.add_argument('--tensorboard',help='Log progress to TensorBoard', action='store_true')
parser.add_argument('--eval',help='evaluate mode', action='store_true')

parser.add_argument("--reduction", type=int, default=16)
parser.add_argument("--clip", type=float, default=5.0)
parser.add_argument('--baseline',help='run baseline model resnet18', action='store_true')
parser.add_argument('--parallel',help='data parallel', action='store_true')
parser.add_argument('--distributed',help='distributed training', action='store_true')
parser.add_argument("--width_mult", type=float, default=1.0)
parser.add_argument('--dynamic_relu_type', default=None, type=str,
                    help='name of dynamic relu type')
parser.add_argument("--local_rank", default=0, type=int)
parser.add_argument('-j', '--workers', default=32, type=int, metavar='N',
                    help='number of data loading workers (default: 4)')
parser.add_argument("--depth", type=int, default=18, help='model depth')
parser.add_argument("--ratio", type=float, default=1.0)
parser.add_argument("--lamda", type=float, default=1e-8)

parser.set_defaults(augment=True)

best_prec1 = 0
args = parser.parse_args()
SEED = 1991

def main():
    global best_prec1, args
    # Log
    if args.local_rank == 0:
        log_format = '[%(asctime)s] %(message)s'
        logging.basicConfig(stream=sys.stdout, level=logging.INFO,
                            format=log_format, datefmt='%d %I:%M:%S')
        log_path = os.path.join('./runs/%s/log'%(args.name))

        if not os.path.exists(log_path):
            os.makedirs(log_path)
        log_file = os.path.join(log_path, 'log.txt')
        fh = logging.FileHandler(os.path.join(log_file))
        fh.setFormatter(logging.Formatter(log_format))
        logging.getLogger().addHandler(fh)

        logging.info("args = %s", args)

        if args.tensorboard: configure("runs/%s" % (args.name))

    # set up
    N_GPUS = int(os.environ['WORLD_SIZE']) if 'WORLD_SIZE' in os.environ else 1
    args.distributed = N_GPUS > 1

    if args.distributed:
        # set up distributed env
        torch.distributed.init_process_group(backend='nccl', init_method='env://')
        torch.cuda.set_device(args.local_rank)
        torch.manual_seed(SEED)
        args.world_size = dist.get_world_size()
        device = torch.device('cuda:{}'.format(args.local_rank))
        dist.barrier()

        # train_dataprovider, val_dataprovider = distributed_dpflow_dataloader(args.batch_size // dist.get_world_size(), group_id)
    train_transform = get_train_transform()
    eval_transform = get_eval_transform()
    train_dataset = get_imagenet_dataset(data_dir='/data/Dataset/ImageNet2012', train=True, transform=train_transform)
    val_dataset = get_imagenet_dataset(data_dir='/data/Dataset/ImageNet2012', train=False, transform=eval_transform)
    # train_dataset = ImageNetNoriDataset('/data/Dataset/ImageNet2012/imagenet.train.nori.list', train_transform)
    # val_dataset = ImageNetNoriDataset('/data/Dataset/ImageNet2012/imagenet.val.nori.list', eval_transform)
    train_sampler = None
    if args.distributed:
        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)

    train_dataprovider = torch.utils.data.DataLoader(
        train_dataset, batch_size=args.batch_size//dist.get_world_size(), shuffle=(train_sampler is None),
        num_workers=args.workers//dist.get_world_size(), pin_memory=True, sampler=train_sampler)

    val_dataprovider = torch.utils.data.DataLoader(
        val_dataset,
        batch_size=args.batch_size//dist.get_world_size(), shuffle=False,
        num_workers=args.workers//dist.get_world_size(), pin_memory=True)

    # normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    # transforms_ = transforms.Compose([transforms.ToTensor(), normalize, ])

    # create model

    if 'fbs_resnet' in args.name:
        model = FBSResNetImageNet(args.depth, 1000, args.ratio)
    else:
        raise NotImplementedError

    # get the number of model parameters
    logging.info('Number of model parameters: {}'.format(
        sum([p.data.nelement() for p in model.parameters()])))

    # for training on multiple GPUs.
    # Use CUDA_VISIBLE_DEVICES=0,1 to specify which GPUs to use
    # model = torch.nn.DataParallel(model).cuda()or
    model = model.to(device)

    if args.parallel:
        model = torch.nn.DataParallel(model)

    if args.distributed:
        model = DDP(model, device_ids=[args.local_rank], output_device=args.local_rank)


    # optionally resume from a checkpoint
    if args.resume:
        if os.path.isfile(args.resume):
            print("=> loading checkpoint '{}'".format(args.resume))
            checkpoint = torch.load(args.resume, map_location=device)
            args.start_epoch = checkpoint['epoch']
            if args.start_epoch >= args.epochs:
                args.start_epoch = 0
            best_prec1 = checkpoint['best_prec1']
            model.load_state_dict(checkpoint['state_dict'], strict=False)
            print("=> loaded checkpoint '{}' (epoch {})"
                  .format(args.resume, checkpoint['epoch']))
        else:
            print("=> no checkpoint found at '{}'".format(args.resume))

    cudnn.benchmark = True

    # define loss function (criterion) and pptimizer
    criterion = nn.CrossEntropyLoss().to(device)
    # criterion = CrossEntropyLabelSmooth(1000, 0.1).to(device)
    optimizer = torch.optim.SGD(model.parameters(), args.lr,
                                momentum=args.momentum,
                                nesterov=True,
                                weight_decay=args.weight_decay)
    iters_per_epoch = 1280000 // args.batch_size
    # scheduler = CosineAnnealingLR(optimizer, T_max=args.epochs*iters_per_epoch)

    if args.eval:
        validate(val_dataprovider, model, criterion, args.start_epoch, device)
        exit(0)

    start_time = time.time()

    for epoch in range(args.start_epoch, args.epochs):
        # train for one epoch
        adjust_learning_rate(optimizer, epoch)
        train(train_dataprovider, iters_per_epoch, model, criterion, optimizer, epoch, device)
        # evaluate on validation set
        if args.local_rank == 0:
            prec1 = validate(val_dataprovider, model, criterion, epoch, device)
            # remember best prec@1 and save checkpoint
            # scheduler.step()
            is_best = prec1 > best_prec1
            best_prec1 = max(prec1, best_prec1)
            save_checkpoint({
                'epoch': epoch + 1,
                'state_dict': model.state_dict(),
                'best_prec1': best_prec1,
            }, is_best)

    if args.local_rank == 0:
        logging.info('Best accuracy: {0}'.format(best_prec1))
        training_time = (time.time() - start_time) / 3600
        logging.info('total training time = {:.3f} hours'.format(training_time))


def train(train_dataprovider, iters_per_epoch, model, criterion, optimizer, epoch, device):
    """Train for one epoch on the training set"""
    batch_time = AverageMeter()
    losses = AverageMeter()
    top1 = AverageMeter()
    top5 = AverageMeter()

    # switch to train mode
    model.train()

    end = time.time()
    for i, (input, target) in enumerate(train_dataprovider):
        target = target.to(device)
        input = input.to(device)

        # compute output
        output, gate_l1_norm = model(input)
        loss = criterion(output, target) + args.lamda * gate_l1_norm

        # measure accuracy and record loss
        prec1, prec5 = accuracy(output, target, topk=(1, 5))
        losses.update(loss.item(), input.size(0))
        top1.update(prec1.item(), input.size(0))
        top5.update(prec5.item(), input.size(0))
        # compute gradient and do SGD step
        optimizer.zero_grad()
        loss.backward()
        torch.nn.utils.clip_grad_norm_(model.parameters(), args.clip)
        optimizer.step()
        dist.barrier()
        # measure elapsed time
        batch_time.update(time.time() - end)
        end = time.time()

        if args.local_rank == 0:
            if i % args.print_freq == 0:
                logging.info('Epoch: [{0}][{1}/{2}]\t'
                             'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\t'
                             'Loss {loss.val:.4f} ({loss.avg:.4f})\t'
                             'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\t'
                             'Prec@5 {top5.val:.3f} ({top5.avg:.3f})\t'.format(
                                epoch, i, iters_per_epoch, batch_time=batch_time,
                                loss=losses, top1=top1, top5=top5))
        # log to TensorBoard
    if args.local_rank == 0:
        if args.tensorboard:
            log_value('train_loss', losses.avg, epoch)
            log_value('train_top1_acc', top1.avg, epoch)
            log_value('train_top5_acc', top5.avg, epoch)


def validate(val_dataprovider, model, criterion, epoch, device):
    """Perform validation on the validation set"""
    batch_time = AverageMeter()
    losses = AverageMeter()
    top1 = AverageMeter()
    top5 = AverageMeter()

    # switch to evaluate mode
    model.eval()
    max_iters = np.ceil(50000/(args.batch_size//dist.get_world_size()))
    end = time.time()
    with torch.no_grad():
        for i, (input, target) in enumerate(val_dataprovider):

            input = input.to(device)
            target = target.to(device)

            # compute output
            output, _ = model(input)
            loss = criterion(output, target)
            # measure accuracy and record loss
            prec1, prec5 = accuracy(output, target, topk=(1,5))
            losses.update(loss.item(), input.size(0))
            top1.update(prec1.item(), input.size(0))
            top5.update(prec5.item(), input.size(0))

            # measure elapsed time
            batch_time.update(time.time() - end)
            end = time.time()

            if i % args.print_freq == 0:
                logging.info('Test: [{0}/{1}]\t'
                      'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\t'
                      'Loss {loss.val:.4f} ({loss.avg:.4f})\t'
                      'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\t'
                      'Prec@5 {top5.val:.3f} ({top5.avg:.3f})\t'.format(
                       i, max_iters, batch_time=batch_time, loss=losses,
                       top1=top1, top5=top5))

        logging.info(' * Prec@1 {top1.avg:.3f}\t'
                     ' * Prec@5 {top5.avg:.3f}'.format(top1=top1, top5=top5))
        # log to TensorBoar
        if args.tensorboard:
            log_value('val_loss', losses.avg, epoch)
            log_value('val_top1_acc', top1.avg, epoch)
            log_value('val_top5_acc', top5.avg, epoch)

    return top1.avg


def save_checkpoint(state, is_best, filename='checkpoint.pth.tar'):
    """Saves checkpoint to disk"""
    directory = "runs/%s/" % (args.name)
    if not os.path.exists(directory):
        os.makedirs(directory)
    filename = directory + filename
    torch.save(state, filename)
    if is_best:
        shutil.copyfile(filename, 'runs/%s/' % (args.name) + 'model_best.pth.tar')


class AverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self):
        self.reset()

    def reset(self):
        self.val = 0
        self.avg = 0
        self.sum = 0
        self.count = 0

    def update(self, val, n=1):
        self.val = val
        self.sum += val * n
        self.count += n
        self.avg = self.sum / self.count


def adjust_learning_rate(optimizer, epoch):
    """Sets the learning rate to the initial LR decayed by 10 after 150 and 225 epochs"""
    lr = args.lr * (0.1 ** (epoch // 20))
    # log to TensorBoard
    if args.local_rank==0 and args.tensorboard:
        log_value('learning_rate', lr, epoch)
    for param_group in optimizer.param_groups:
        param_group['lr'] = lr


def accuracy(output, target, topk=(1,)):
    """Computes the precision@k for the specified values of k"""
    maxk = max(topk)
    batch_size = target.size(0)

    _, pred = output.topk(maxk, 1, True, True)
    pred = pred.t()
    correct = pred.eq(target.view(1, -1).expand_as(pred))

    res = []
    for k in topk:
        correct_k = correct[:k].view(-1).float().sum(0)
        res.append(correct_k.mul_(100.0 / batch_size))
    return res

class CrossEntropyLabelSmooth(nn.Module):

	def __init__(self, num_classes, epsilon):
		super(CrossEntropyLabelSmooth, self).__init__()
		self.num_classes = num_classes
		self.epsilon = epsilon
		self.logsoftmax = nn.LogSoftmax(dim=1)

	def forward(self, inputs, targets):
		log_probs = self.logsoftmax(inputs)
		targets = torch.zeros_like(log_probs).scatter_(1, targets.unsqueeze(1), 1)
		targets = (1 - self.epsilon) * targets + self.epsilon / self.num_classes
		loss = (-targets * log_probs).mean(0).sum()
		return loss


def reduce_tensor(tensor):
    rt = tensor.clone()
    dist.all_reduce(rt, op=dist.ReduceOp.SUM)
    rt /= args.world_size
    return rt

if __name__ == '__main__':
    main()
